on:
  push:
    branches:
      - master
      - development
      - LandWeb
  pull_request:
    branches:
      - master
      - development

name: R-CMD-check

jobs:
  R-CMD-check:
    if: "!contains(github.event.commits[0].message, '[skip-ci]')"
    runs-on: ${{ matrix.config.os }}

    name: ${{ matrix.config.os }} (${{ matrix.config.r }})

    strategy:
      fail-fast: false
      matrix:
        config:
          - {os: macOS-latest,   nosuggests: false, r: 'release'}
          - {os: windows-latest, nosuggests: false, r: 'devel'}
          - {os: windows-latest, nosuggests: false, r: 'release'}
          - {os: ubuntu-20.04,   nosuggests: false, r: 'devel'}
          - {os: ubuntu-20.04,   nosuggests: false, r: 'release'}
          - {os: ubuntu-20.04,   nosuggests: true,  r: 'release'}

    env:
      _R_CHECK_DEPENDS_ONLY_: ${{ matrix.config.nosuggests }}
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}
      R_REMOTES_NO_ERRORS_FROM_WARNINGS: true

    steps:
      - uses: actions/checkout@v3

      - uses: r-lib/actions/setup-pandoc@v2

      - name: Install Linux system dependencies
        if: runner.os == 'Linux'
        run: |
          sudo add-apt-repository -y ppa:ubuntugis/ubuntugis-unstable
          sudo apt-get update -y
          sudo apt-get install -y libudunits2-dev libgdal-dev libgeos-dev libproj-dev libsqlite0-dev

      - name: Install macOS system dependencies
        if: runner.os == 'macOS'
        run: |
          brew install pkg-config
          brew install gdal

      - uses: r-lib/actions/setup-r@v2
        with:
          extra-repositories: 'https://r-spatial.r-universe.dev/'
          Ncpus: 2
          r-version: ${{ matrix.config.r }}
          use-public-rspm: false

      - name: Install sf from r-universe
        run: |
          install.packages("sf")
        shell: Rscript {0}

      - uses: r-lib/actions/setup-r-dependencies@v2
        with:
          extra-packages: |
            any::rcmdcheck
            any::sf
            any::XML
            BioSIM=?ignore
            fastshp=?ignore
            J4R=?ignore
            NLMR=?ignore
            PredictiveEcology/quickPlot@development
            PredictiveEcology/reproducible@development
            PredictiveEcology/Require@development
            PredictiveEcology/SpaDES.core@development
            PredictiveEcology/SpaDES.tools@development

      - name: Install additional package dependencies
        run: |
          pak::pkg_install("remotes")
          pak::pkg_install("ropensci/NLMR")
          remotes::install_github("s-u/fastshp")
          install.packages("https://sourceforge.net/projects/repiceasource/files/latest", repos = NULL,  type = "source") ## J4R
          install.packages("https://sourceforge.net/projects/biosimclient.mrnfforesttools.p/files/latest", repos = NULL,  type = "source") ## BioSIM
        shell: Rscript {0}

      - uses: r-lib/actions/check-r-package@v2

      - name: Show testthat output
        if: always()
        run: find check -name 'testthat.Rout*' -exec cat '{}' \; || true
        shell: bash

      - name: Upload check results
        if: failure()
        uses: actions/upload-artifact@main
        with:
          name: ${{ runner.os }}-r${{ matrix.config.r }}-results
          path: check
